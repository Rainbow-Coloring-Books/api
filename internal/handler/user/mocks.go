// Code generated by MockGen. DO NOT EDIT.
// Source: rainbowcoloringbooks/internal/handler/user (interfaces: UserHandler)

// Package user is a generated GoMock package.
package user

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mux "github.com/gorilla/mux"
)

// MockUserHandler is a mock of UserHandler interface.
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler.
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance.
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockUserHandler) Register(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register.
func (mr *MockUserHandlerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserHandler)(nil).Register), arg0, arg1)
}

// RegisterRoutes mocks base method.
func (m *MockUserHandler) RegisterRoutes(arg0 *mux.Router) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterRoutes", arg0)
}

// RegisterRoutes indicates an expected call of RegisterRoutes.
func (mr *MockUserHandlerMockRecorder) RegisterRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRoutes", reflect.TypeOf((*MockUserHandler)(nil).RegisterRoutes), arg0)
}
